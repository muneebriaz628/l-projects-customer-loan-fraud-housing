# Required Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from imblearn.over_sampling import SMOTE

# Load the dataset
df = pd.read_csv('creditcard.csv')

# Check for imbalance
print("Original class distribution:\n", df['Class'].value_counts())

# Feature and Target Split
X = df.drop('Class', axis=1)
y = df['Class']

# Handle imbalance using SMOTE
sm = SMOTE(random_state=42)
X_res, y_res = sm.fit_resample(X, y)

print("\nBalanced class distribution:\n", pd.Series(y_res).value_counts())

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.2, random_state=42)

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluation
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Accuracy Score:", accuracy_score(y_test, y_pred))
# Single prediction interface
def test_transaction():
    print("\nEnter transaction details for fraud check (30 features):")
    input_data = []
    for i in range(30):
        value = float(input(f"Enter value for V{i+1 if i < 28 else ('Amount' if i==28 else 'Time')}: "))
        input_data.append(value)

    input_array = np.array(input_data).reshape(1, -1)
    prediction = model.predict(input_array)

    if prediction[0] == 1:
        print("⚠️ Fraudulent Transaction Detected!")
    else:
        print("✅ Legitimate Transaction")

# Uncomment to test:
# test_transaction()

