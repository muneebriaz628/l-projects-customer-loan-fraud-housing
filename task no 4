from sklearn.datasets import load_boston
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import load_boston

# Load dataset
boston = load_boston()
X = pd.DataFrame(boston.data, columns=boston.feature_names)
y = pd.DataFrame(boston.target, columns=['PRICE'])

# Normalize data
scaler = StandardScaler()
X_scaled = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)

# Split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# ---------- Linear Regression From Scratch ----------
class LinearRegressionScratch:
    def __init__(self, lr=0.01, epochs=1000):
        self.lr = lr
        self.epochs = epochs
    
    def fit(self, X, y):
        self.m, self.n = X.shape
        self.X = np.c_[np.ones((self.m, 1)), X]
        self.y = y.values.reshape(-1, 1)
        self.theta = np.zeros((self.n + 1, 1))
        
        for _ in range(self.epochs):
            gradients = (2/self.m) * self.X.T.dot(self.X.dot(self.theta) - self.y)
            self.theta -= self.lr * gradients
    
    def predict(self, X):
        X_b = np.c_[np.ones((X.shape[0], 1)), X]
        return X_b.dot(self.theta)

lr_model = LinearRegressionScratch()
lr_model.fit(X_train, y_train)
lr_preds = lr_model.predict(X_test)

print("\nLinear Regression")
print("RMSE:", np.sqrt(mean_squared_error(y_test, lr_preds)))
print("RÂ²:", r2_score(y_test, lr_preds))
